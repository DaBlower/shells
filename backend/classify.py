# a script to classify the probablility of a project being ai
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from dotenv import load_dotenv
from colorama import Fore, Style
import os
import sys
import re # regex
import numpy as np

load_dotenv()

uri = os.getenv("MONGO_URI")
# Create a new client and connect to the server
try:
    client = MongoClient(
        uri, 
        server_api=ServerApi('1'),
        maxPoolSize=50,  # maximum connections
        minPoolSize=5,
        maxIdleTimeMS=30000,  # how long unused connections should last
        connectTimeoutMS=30000,  # connection timeout
        socketTimeoutMS=30000,   # socket timeout
        serverSelectionTimeoutMS=30000  # server selection timeout
    )
except Exception as e:
    print(f"An Invalid URI host error was received. Is your Atlas host name correct in your connection string? {e}")
    sys.exit(2)

# use a database named "shells"
db = client.shells

# create/use a new collection
project_collection = db["projects"]
devlog_collection = db["devlogs"]

buzzwords = []

def load_buzzwords():
    global buzzwords # modify the global variable instead of creating a new local one
    with open("config/BUZZWORDS.txt", "r") as f:
        content = f.read()
        buzzwords = [w.strip() for w in content.split(",") if w.strip()]

def extract_features(text):
    if not buzzwords:
        load_buzzwords()
    sentences = re.split(r'(?<=[.!?])\s+', text.strip()) # split text into array
    sentences = [s for s in sentences if s] # filter out blank parts

    words = re.findall(r'\b\w+\b', text) # all words
    num_words = len(words) # number of words
    num_sentences = len(sentences) # number of sentences

    mean_sentence_length = float(np.mean([len(s.split()) for s in sentences]) if sentences else 0.0) # split each sentence into words and get the number of words in the sentence

    text_lower = text.lower()

    # buzzwords
    buzz_count = sum(text_lower.count(buzzword.lower()) for buzzword in buzzwords) # the amount of buzzwords in the text
    buzz_ratio = buzz_count / num_words if num_words > 0 else 0.0
 
    # punctuation
    punct_count = len(re.findall(r'[.,!?;:]', text)) # the amount of punctuation in the text
    punct_ratio = punct_count / num_words if num_words > 0 else 0.0

    return { # return a dictionary
        "num_words": num_words,
        "num_sentences": num_sentences,
        "mean_sentences_length": mean_sentence_length,
        "buzz_ratio": buzz_ratio,
        "punct_ratio": punct_ratio
    }

def calculate_ai_probability(features):
    score = 0.0
    # variables
    mean_sentence = 0.19
    buzz_multi = 5

    # ai has medium sentence length
    if 12 <= features["mean_sentences_length"] <= 20:
        score += mean_sentence

    # buzzwords
    score += min(features["buzz_ratio"] * buzz_multi, 0.3)  # max 0.3 from buzzwords

    # punctuation
    if features["punct_ratio"] > 0.09:
        score += 0.1

    # lots of words probably means it's generated by ai (devlogs only)
    if features["num_words"] > 200:
        score += 0.2

    return min(score, 1.0) # cap at 1.0

def classify_description(project_id):
    project = project_collection.find_one({"id": project_id})
    if not project:
        print(f"{Fore.RED}Project {project_id} not found!{Style.RESET_ALL}")
        return
    text = project.get("description")

    load_buzzwords()
    features = extract_features(text)
    prob = calculate_ai_probability(features)

    print(f"{Fore.GREEN}Found project! {project['title']}{Style.RESET_ALL}")
    print(f"AI Probability: {Fore.YELLOW}{prob*100:.2f}%{Style.RESET_ALL}")
    print(f"Features: {features}")

    print(text)
    print(buzzwords)

    return prob

def classify_devlog(text):
    if not text:
        print(f"{Fore.RED}Text is empty!{Style.RESET_ALL}")
        return 0.0
    
    load_buzzwords()
    features = extract_features(text)
    prob = calculate_ai_probability(features)

    print(f"{Fore.GREEN}Using text{Style.RESET_ALL}")
    print(f"AI Probability: {Fore.YELLOW}{prob*100:.2f}%{Style.RESET_ALL}")
    print(f"Features: {features}")
    return prob